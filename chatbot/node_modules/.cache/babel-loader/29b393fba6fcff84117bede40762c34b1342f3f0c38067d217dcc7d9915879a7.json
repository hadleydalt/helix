{"ast":null,"code":"var _jsxFileName = \"/Users/hadleydalton/Desktop/practice_chatbot_react/chatbot/src/Chatbot.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [profile, setProfile] = useState(\"Anxious Patient\");\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n\n  const patientProfiles = {\n    \"Angry Patient\": \"gets easily frustrated and feels misunderstood.\",\n    \"Anxious Patient\": \"struggles with anxiety and overthinks situations.\",\n    \"Depressed Patient\": \"feels hopeless and lacks motivation.\",\n    \"Trauma Survivor\": \"has experienced trauma and is hesitant to open up.\"\n  };\n  const sendMessage = async () => {\n    if (!userInput) return;\n    const newMessages = [...messages, {\n      role: \"user\",\n      content: userInput\n    }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/chat/completions\", {\n        user_id: userId,\n        message: userInput,\n        profile: patientProfiles[profile]\n      });\n      setMessages([...newMessages, {\n        role: \"assistant\",\n        content: response.data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"400px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Therapy Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => setProfile(e.target.value),\n      value: profile,\n      children: Object.keys(patientProfiles).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: key,\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        padding: \"10px\",\n        height: \"300px\",\n        overflowY: \"scroll\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: msg.role === \"user\" ? \"right\" : \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [msg.role === \"user\" ? \"You\" : \"AI\", \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      onKeyPress: e => e.key === \"Enter\" && sendMessage(),\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"vBy5ZJRkhH090cKZzZd/Bia83j8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","messages","setMessages","profile","setProfile","userId","patientProfiles","sendMessage","newMessages","role","content","response","post","user_id","message","data","error","console","style","width","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","e","target","value","Object","keys","map","key","border","padding","height","overflowY","msg","index","textAlign","type","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/hadleydalton/Desktop/practice_chatbot_react/chatbot/src/Chatbot.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\n\nconst Chatbot = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [profile, setProfile] = useState(\"Anxious Patient\");\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n\n  const patientProfiles = {\n    \"Angry Patient\": \"gets easily frustrated and feels misunderstood.\",\n    \"Anxious Patient\": \"struggles with anxiety and overthinks situations.\",\n    \"Depressed Patient\": \"feels hopeless and lacks motivation.\",\n    \"Trauma Survivor\": \"has experienced trauma and is hesitant to open up.\"\n  };\n\n  const sendMessage = async () => {\n    if (!userInput) return;\n\n    const newMessages = [...messages, { role: \"user\", content: userInput }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/chat/completions\", {\n        user_id: userId,\n        message: userInput,\n        profile: patientProfiles[profile]\n      });\n\n      setMessages([...newMessages, { role: \"assistant\", content: response.data.response }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n\n  return (\n    <div style={{ width: \"400px\", margin: \"auto\" }}>\n      <h2>AI Therapy Chat</h2>\n      <select onChange={(e) => setProfile(e.target.value)} value={profile}>\n        {Object.keys(patientProfiles).map((key) => (\n          <option key={key} value={key}>{key}</option>\n        ))}\n      </select>\n      <div style={{ border: \"1px solid black\", padding: \"10px\", height: \"300px\", overflowY: \"scroll\" }}>\n        {messages.map((msg, index) => (\n          <div key={index} style={{ textAlign: msg.role === \"user\" ? \"right\" : \"left\" }}>\n            <b>{msg.role === \"user\" ? \"You\" : \"AI\"}:</b> {msg.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\n        placeholder=\"Type a message...\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default Chatbot;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,iBAAiB,CAAC;EACzD,MAAMY,MAAM,GAAG,SAAS,CAAC,CAAC;;EAE1B,MAAMC,eAAe,GAAG;IACtB,eAAe,EAAE,iDAAiD;IAClE,iBAAiB,EAAE,mDAAmD;IACtE,mBAAmB,EAAE,sCAAsC;IAC3D,iBAAiB,EAAE;EACrB,CAAC;EAED,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI,CAACR,SAAS,EAAE;IAEhB,MAAMS,WAAW,GAAG,CAAC,GAAGP,QAAQ,EAAE;MAAEQ,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAEX;IAAU,CAAC,CAAC;IACvEG,WAAW,CAACM,WAAW,CAAC;IACxBR,YAAY,CAAC,EAAE,CAAC;IAEhB,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAAC,wCAAwC,EAAE;QAC1EC,OAAO,EAAER,MAAM;QACfS,OAAO,EAAEf,SAAS;QAClBI,OAAO,EAAEG,eAAe,CAACH,OAAO;MAClC,CAAC,CAAC;MAEFD,WAAW,CAAC,CAAC,GAAGM,WAAW,EAAE;QAAEC,IAAI,EAAE,WAAW;QAAEC,OAAO,EAAEC,QAAQ,CAACI,IAAI,CAACJ;MAAS,CAAC,CAAC,CAAC;IACvF,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACEpB,OAAA;IAAKsB,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC7CzB,OAAA;MAAAyB,QAAA,EAAI;IAAe;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACxB7B,OAAA;MAAQ8B,QAAQ,EAAGC,CAAC,IAAKvB,UAAU,CAACuB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAACA,KAAK,EAAE1B,OAAQ;MAAAkB,QAAA,EACjES,MAAM,CAACC,IAAI,CAACzB,eAAe,CAAC,CAAC0B,GAAG,CAAEC,GAAG,iBACpCrC,OAAA;QAAkBiC,KAAK,EAAEI,GAAI;QAAAZ,QAAA,EAAEY;MAAG,GAArBA,GAAG;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2B,CAC5C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eACT7B,OAAA;MAAKsB,KAAK,EAAE;QAAEgB,MAAM,EAAE,iBAAiB;QAAEC,OAAO,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,SAAS,EAAE;MAAS,CAAE;MAAAhB,QAAA,EAC9FpB,QAAQ,CAAC+B,GAAG,CAAC,CAACM,GAAG,EAAEC,KAAK,kBACvB3C,OAAA;QAAiBsB,KAAK,EAAE;UAAEsB,SAAS,EAAEF,GAAG,CAAC7B,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG;QAAO,CAAE;QAAAY,QAAA,gBAC5EzB,OAAA;UAAAyB,QAAA,GAAIiB,GAAG,CAAC7B,IAAI,KAAK,MAAM,GAAG,KAAK,GAAG,IAAI,EAAC,GAAC;QAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,KAAC,EAACa,GAAG,CAAC5B,OAAO;MAAA,GADjD6B,KAAK;QAAAjB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN7B,OAAA;MACE6C,IAAI,EAAC,MAAM;MACXZ,KAAK,EAAE9B,SAAU;MACjB2B,QAAQ,EAAGC,CAAC,IAAK3B,YAAY,CAAC2B,CAAC,CAACC,MAAM,CAACC,KAAK,CAAE;MAC9Ca,UAAU,EAAGf,CAAC,IAAKA,CAAC,CAACM,GAAG,KAAK,OAAO,IAAI1B,WAAW,CAAC,CAAE;MACtDoC,WAAW,EAAC;IAAmB;MAAArB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,eACF7B,OAAA;MAAQgD,OAAO,EAAErC,WAAY;MAAAc,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA1DID,OAAO;AAAAgD,EAAA,GAAPhD,OAAO;AA4Db,eAAeA,OAAO;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}