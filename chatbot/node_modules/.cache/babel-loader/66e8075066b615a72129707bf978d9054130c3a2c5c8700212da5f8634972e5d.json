{"ast":null,"code":"var _jsxFileName = \"/Users/hadleydalton/Desktop/Desktop/sellscale_agentic_hr/chatbot/src/Chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = ({\n  onSequenceUpdate\n}) => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n  const abortControllerRef = useRef(null);\n  const resetChat = async () => {\n    setMessages([]); // Clear messages on frontend\n    onSequenceUpdate(''); // Clear sequence\n    try {\n      await axios.post(\"http://127.0.0.1:5000/reset\", {\n        user_id: userId\n      });\n    } catch (error) {\n      console.error(\"Error resetting chat:\", error);\n    }\n  };\n  const sendMessage = async () => {\n    if (!userInput || isStreaming) return;\n    const newMessages = [...messages, {\n      role: \"user\",\n      content: userInput,\n      type: \"normal\"\n    }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n    setIsStreaming(true);\n\n    // Add an empty assistant message that we'll update as we receive chunks\n    setMessages(prev => [...prev, {\n      role: \"assistant\",\n      content: \"\",\n      type: \"normal\"\n    }]);\n    try {\n      var _response$body;\n      // Create a new AbortController for this request\n      abortControllerRef.current = new AbortController();\n      const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          message: userInput\n        }),\n        signal: abortControllerRef.current.signal\n      });\n      if (!response.ok) throw new Error('Network response was not ok');\n      const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n      if (!reader) throw new Error('No reader available');\n      const decoder = new TextDecoder();\n      let assistantMessage = \"\";\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value);\n        if (chunk.includes('[GENERATING_SEQUENCE]')) {\n          // Replace the current message with a sequence generation message\n          setMessages(prev => {\n            const newMessages = [...prev];\n            newMessages[newMessages.length - 1] = {\n              role: \"assistant\",\n              content: \"Generating sequence...\",\n              type: \"sequence\"\n            };\n            return newMessages;\n          });\n        } else if (chunk.includes('[SEQUENCE_DATA]')) {\n          // Extract and set the sequence data\n          const sequenceData = chunk.replace('data: [SEQUENCE_DATA]', '').trim();\n          onSequenceUpdate(sequenceData);\n        } else if (chunk.startsWith('data: ')) {\n          const content = chunk.slice(6);\n          assistantMessage += content;\n          setMessages(prev => {\n            const newMessages = [...prev];\n            newMessages[newMessages.length - 1] = {\n              role: \"assistant\",\n              content: assistantMessage,\n              type: \"normal\"\n            };\n            return newMessages;\n          });\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        console.log('Request was aborted');\n      } else {\n        console.error(\"Error sending message:\", error);\n      }\n    } finally {\n      setIsStreaming(false);\n      abortControllerRef.current = null;\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role} ${msg.type === \"sequence\" ? \"sequence-message\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: msg.role === \"user\" ? \"You\" : \"Helix\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            whiteSpace: 'pre-wrap'\n          },\n          children: msg.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type a message...\",\n        className: \"message-input\",\n        disabled: isStreaming\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        className: \"send-button\",\n        disabled: isStreaming,\n        children: isStreaming ? \"...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"iu9gRAo2fsP6BgWdlJxS2kp0MAg=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useRef","axios","jsxDEV","_jsxDEV","Chatbot","onSequenceUpdate","_s","userInput","setUserInput","messages","setMessages","isStreaming","setIsStreaming","userId","abortControllerRef","resetChat","post","user_id","error","console","sendMessage","newMessages","role","content","type","prev","_response$body","current","AbortController","response","fetch","method","headers","body","JSON","stringify","message","signal","ok","Error","reader","getReader","decoder","TextDecoder","assistantMessage","done","value","read","chunk","decode","includes","length","sequenceData","replace","trim","startsWith","slice","name","log","handleKeyPress","e","key","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","style","whiteSpace","onChange","target","onKeyPress","placeholder","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/hadleydalton/Desktop/Desktop/sellscale_agentic_hr/chatbot/src/Chatbot.tsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport type { ChangeEvent, KeyboardEvent } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n  type?: \"sequence\" | \"normal\";\n}\n\ninterface ChatbotProps {\n  onSequenceUpdate: (sequence: string) => void;\n}\n\nconst Chatbot: React.FC<ChatbotProps> = ({ onSequenceUpdate }) => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  const resetChat = async (): Promise<void> => {\n    setMessages([]); // Clear messages on frontend\n    onSequenceUpdate(''); // Clear sequence\n    try {\n      await axios.post(\"http://127.0.0.1:5000/reset\", { user_id: userId });\n    } catch (error) {\n      console.error(\"Error resetting chat:\", error);\n    }\n  };\n\n  const sendMessage = async (): Promise<void> => {\n    if (!userInput || isStreaming) return;\n\n    const newMessages: Message[] = [...messages, { role: \"user\", content: userInput, type: \"normal\" }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n    setIsStreaming(true);\n\n    // Add an empty assistant message that we'll update as we receive chunks\n    setMessages(prev => [...prev, { role: \"assistant\", content: \"\", type: \"normal\" }]);\n\n    try {\n      // Create a new AbortController for this request\n      abortControllerRef.current = new AbortController();\n\n      const response = await fetch(\"http://127.0.0.1:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          user_id: userId,\n          message: userInput\n        }),\n        signal: abortControllerRef.current.signal\n      });\n\n      if (!response.ok) throw new Error('Network response was not ok');\n\n      const reader = response.body?.getReader();\n      if (!reader) throw new Error('No reader available');\n\n      const decoder = new TextDecoder();\n      let assistantMessage = \"\";\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        \n        if (chunk.includes('[GENERATING_SEQUENCE]')) {\n          // Replace the current message with a sequence generation message\n          setMessages(prev => {\n            const newMessages = [...prev];\n            newMessages[newMessages.length - 1] = {\n              role: \"assistant\",\n              content: \"Generating sequence...\",\n              type: \"sequence\"\n            };\n            return newMessages;\n          });\n        } else if (chunk.includes('[SEQUENCE_DATA]')) {\n          // Extract and set the sequence data\n          const sequenceData = chunk.replace('data: [SEQUENCE_DATA]', '').trim();\n          onSequenceUpdate(sequenceData);\n        } else if (chunk.startsWith('data: ')) {\n          const content = chunk.slice(6);\n          assistantMessage += content;\n          setMessages(prev => {\n            const newMessages = [...prev];\n            newMessages[newMessages.length - 1] = {\n              role: \"assistant\",\n              content: assistantMessage,\n              type: \"normal\"\n            };\n            return newMessages;\n          });\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        console.log('Request was aborted');\n      } else {\n        console.error(\"Error sending message:\", error);\n      }\n    } finally {\n      setIsStreaming(false);\n      abortControllerRef.current = null;\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"chat-container\">\n        {messages.map((msg, index) => (\n          <div \n            key={index} \n            className={`message ${msg.role} ${msg.type === \"sequence\" ? \"sequence-message\" : \"\"}`}\n          >\n            <b>{msg.role === \"user\" ? \"You\" : \"Helix\"}</b>\n            <div style={{ whiteSpace: 'pre-wrap' }}>{msg.content}</div>\n          </div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setUserInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type a message...\"\n          className=\"message-input\"\n          disabled={isStreaming}\n        />\n        <button \n          onClick={sendMessage}\n          className=\"send-button\"\n          disabled={isStreaming}\n        >\n          {isStreaming ? \"...\" : \"Send\"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}