{"ast":null,"code":"var _jsxFileName = \"/Users/hadleydalton/Desktop/Desktop/sellscale_agentic_hr/chatbot/src/Chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [profile, setProfile] = useState(\"Anxious Patient\");\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n\n  const patientProfiles = {\n    \"Angry Patient\": \"gets easily frustrated and feels misunderstood.\",\n    \"Anxious Patient\": \"struggles with anxiety and overthinks situations.\",\n    \"Depressed Patient\": \"feels hopeless and lacks motivation.\",\n    \"Trauma Survivor\": \"has experienced trauma and is hesitant to open up.\"\n  };\n  const resetChat = async () => {\n    setMessages([]); // Clear messages on frontend\n\n    try {\n      await axios.post(\"http://127.0.0.1:5000/reset\", {\n        user_id: userId\n      });\n    } catch (error) {\n      console.error(\"Error resetting chat:\", error);\n    }\n  };\n  const sendMessage = async () => {\n    if (!userInput) return;\n    const newMessages = [...messages, {\n      role: \"user\",\n      content: userInput\n    }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/chat\", {\n        user_id: userId,\n        message: userInput,\n        profile: patientProfiles[profile]\n      });\n      setMessages([...newMessages, {\n        role: \"assistant\",\n        content: response.data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"400px\",\n      margin: \"auto\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"AI Therapy Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => {\n        setProfile(e.target.value);\n        resetChat();\n      },\n      value: profile,\n      children: Object.keys(patientProfiles).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: key,\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid black\",\n        padding: \"10px\",\n        height: \"300px\",\n        overflowY: \"scroll\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: msg.role === \"user\" ? \"right\" : \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [msg.role === \"user\" ? \"You\" : \"AI\", \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      onKeyPress: handleKeyPress,\n      placeholder: \"Type a message...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"vBy5ZJRkhH090cKZzZd/Bia83j8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","messages","setMessages","profile","setProfile","userId","patientProfiles","resetChat","post","user_id","error","console","sendMessage","newMessages","role","content","response","message","data","handleKeyPress","e","key","style","width","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","value","Object","keys","map","border","padding","height","overflowY","msg","index","textAlign","type","onKeyPress","placeholder","onClick","_c","$RefreshReg$"],"sources":["/Users/hadleydalton/Desktop/Desktop/sellscale_agentic_hr/chatbot/src/Chatbot.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport type { ChangeEvent, KeyboardEvent } from \"react\";\nimport axios from \"axios\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\ninterface PatientProfile {\n  [key: string]: string;\n}\n\nconst Chatbot: React.FC = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [profile, setProfile] = useState(\"Anxious Patient\");\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n\n  const patientProfiles: PatientProfile = {\n    \"Angry Patient\": \"gets easily frustrated and feels misunderstood.\",\n    \"Anxious Patient\": \"struggles with anxiety and overthinks situations.\",\n    \"Depressed Patient\": \"feels hopeless and lacks motivation.\",\n    \"Trauma Survivor\": \"has experienced trauma and is hesitant to open up.\"\n  };\n\n  const resetChat = async (): Promise<void> => {\n    setMessages([]); // Clear messages on frontend\n  \n    try {\n      await axios.post(\"http://127.0.0.1:5000/reset\", { user_id: userId });\n    } catch (error) {\n      console.error(\"Error resetting chat:\", error);\n    }\n  };\n\n  const sendMessage = async (): Promise<void> => {\n    if (!userInput) return;\n\n    const newMessages: Message[] = [...messages, { role: \"user\", content: userInput }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/chat\", {\n        user_id: userId,\n        message: userInput,\n        profile: patientProfiles[profile]\n      });\n\n      setMessages([...newMessages, { role: \"assistant\", content: response.data.response }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div style={{ width: \"400px\", margin: \"auto\" }}>\n      <h2>AI Therapy Chat</h2>\n      <select \n        onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n          setProfile(e.target.value);\n          resetChat();\n        }} \n        value={profile}\n      >\n        {Object.keys(patientProfiles).map((key) => (\n          <option key={key} value={key}>{key}</option>\n        ))}\n      </select>\n      <div style={{ border: \"1px solid black\", padding: \"10px\", height: \"300px\", overflowY: \"scroll\" }}>\n        {messages.map((msg, index) => (\n          <div key={index} style={{ textAlign: msg.role === \"user\" ? \"right\" : \"left\" }}>\n            <b>{msg.role === \"user\" ? \"You\" : \"AI\"}:</b> {msg.content}\n          </div>\n        ))}\n      </div>\n      <input\n        type=\"text\"\n        value={userInput}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => setUserInput(e.target.value)}\n        onKeyPress={handleKeyPress}\n        placeholder=\"Type a message...\"\n      />\n      <button onClick={sendMessage}>Send</button>\n    </div>\n  );\n};\n\nexport default Chatbot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}