{"ast":null,"code":"var _jsxFileName = \"/Users/hadleydalton/Desktop/Desktop/sellscale_agentic_hr/chatbot/src/Chatbot.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [profile, setProfile] = useState(\"Anxious Patient\");\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n\n  const patientProfiles = {\n    \"Angry Patient\": \"gets easily frustrated and feels misunderstood.\",\n    \"Anxious Patient\": \"struggles with anxiety and overthinks situations.\",\n    \"Depressed Patient\": \"feels hopeless and lacks motivation.\",\n    \"Trauma Survivor\": \"has experienced trauma and is hesitant to open up.\"\n  };\n  const resetChat = async () => {\n    setMessages([]); // Clear messages on frontend\n\n    try {\n      await axios.post(\"http://127.0.0.1:5000/reset\", {\n        user_id: userId\n      });\n    } catch (error) {\n      console.error(\"Error resetting chat:\", error);\n    }\n  };\n  const sendMessage = async () => {\n    if (!userInput) return;\n    const newMessages = [...messages, {\n      role: \"user\",\n      content: userInput\n    }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/chat\", {\n        user_id: userId,\n        message: userInput,\n        profile: patientProfiles[profile]\n      });\n      setMessages([...newMessages, {\n        role: \"assistant\",\n        content: response.data.response\n      }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: \"AI Therapy Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"select\",\n      onChange: e => {\n        setProfile(e.target.value);\n        resetChat();\n      },\n      value: profile,\n      children: Object.keys(patientProfiles).map(key => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: key,\n        children: key\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        border: \"1px solid #ddd\",\n        borderRadius: \"4px\",\n        padding: \"10px\",\n        marginBottom: \"20px\",\n        overflowY: \"auto\",\n        backgroundColor: \"white\"\n      },\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: msg.role === \"user\" ? \"right\" : \"left\",\n          marginBottom: \"10px\",\n          padding: \"8px\",\n          borderRadius: \"4px\",\n          backgroundColor: msg.role === \"user\" ? \"#e3f2fd\" : \"#f5f5f5\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"b\", {\n          children: [msg.role === \"user\" ? \"You\" : \"AI\", \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), \" \", msg.content]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        placeholder: \"Type a message...\",\n        style: {\n          flex: 1,\n          padding: \"8px\",\n          borderRadius: \"4px\",\n          border: \"1px solid #ddd\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        style: {\n          padding: \"8px 16px\",\n          borderRadius: \"4px\",\n          border: \"none\",\n          backgroundColor: \"#2196f3\",\n          color: \"white\",\n          cursor: \"pointer\"\n        },\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"vBy5ZJRkhH090cKZzZd/Bia83j8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","Chatbot","_s","userInput","setUserInput","messages","setMessages","profile","setProfile","userId","patientProfiles","resetChat","post","user_id","error","console","sendMessage","newMessages","role","content","response","message","data","handleKeyPress","e","key","className","children","style","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","onChange","target","value","Object","keys","map","flex","border","borderRadius","padding","overflowY","backgroundColor","msg","index","textAlign","display","gap","type","onKeyPress","placeholder","onClick","color","cursor","_c","$RefreshReg$"],"sources":["/Users/hadleydalton/Desktop/Desktop/sellscale_agentic_hr/chatbot/src/Chatbot.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport type { ChangeEvent, KeyboardEvent } from \"react\";\nimport axios from \"axios\";\nimport \"./Chatbot.css\";\n\ninterface Message {\n  role: \"user\" | \"assistant\";\n  content: string;\n}\n\ninterface PatientProfile {\n  [key: string]: string;\n}\n\nconst Chatbot: React.FC = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [profile, setProfile] = useState(\"Anxious Patient\");\n  const userId = \"user123\"; // Ideally, this would be dynamic for real users\n\n  const patientProfiles: PatientProfile = {\n    \"Angry Patient\": \"gets easily frustrated and feels misunderstood.\",\n    \"Anxious Patient\": \"struggles with anxiety and overthinks situations.\",\n    \"Depressed Patient\": \"feels hopeless and lacks motivation.\",\n    \"Trauma Survivor\": \"has experienced trauma and is hesitant to open up.\"\n  };\n\n  const resetChat = async (): Promise<void> => {\n    setMessages([]); // Clear messages on frontend\n  \n    try {\n      await axios.post(\"http://127.0.0.1:5000/reset\", { user_id: userId });\n    } catch (error) {\n      console.error(\"Error resetting chat:\", error);\n    }\n  };\n\n  const sendMessage = async (): Promise<void> => {\n    if (!userInput) return;\n\n    const newMessages: Message[] = [...messages, { role: \"user\", content: userInput }];\n    setMessages(newMessages);\n    setUserInput(\"\");\n\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/chat\", {\n        user_id: userId,\n        message: userInput,\n        profile: patientProfiles[profile]\n      });\n\n      setMessages([...newMessages, { role: \"assistant\", content: response.data.response }]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>): void => {\n    if (e.key === \"Enter\") {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <h2 style={{ marginBottom: \"20px\" }}>AI Therapy Chat</h2>\n      <select \n        className=\"select\"\n        onChange={(e: ChangeEvent<HTMLSelectElement>) => {\n          setProfile(e.target.value);\n          resetChat();\n        }} \n        value={profile}\n      >\n        {Object.keys(patientProfiles).map((key) => (\n          <option key={key} value={key}>{key}</option>\n        ))}\n      </select>\n      <div style={{ \n        flex: 1,\n        border: \"1px solid #ddd\",\n        borderRadius: \"4px\",\n        padding: \"10px\",\n        marginBottom: \"20px\",\n        overflowY: \"auto\",\n        backgroundColor: \"white\"\n      }}>\n        {messages.map((msg, index) => (\n          <div \n            key={index} \n            style={{ \n              textAlign: msg.role === \"user\" ? \"right\" : \"left\",\n              marginBottom: \"10px\",\n              padding: \"8px\",\n              borderRadius: \"4px\",\n              backgroundColor: msg.role === \"user\" ? \"#e3f2fd\" : \"#f5f5f5\"\n            }}\n          >\n            <b>{msg.role === \"user\" ? \"You\" : \"AI\"}:</b> {msg.content}\n          </div>\n        ))}\n      </div>\n      <div style={{ display: \"flex\", gap: \"10px\" }}>\n        <input\n          type=\"text\"\n          value={userInput}\n          onChange={(e: ChangeEvent<HTMLInputElement>) => setUserInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Type a message...\"\n          style={{\n            flex: 1,\n            padding: \"8px\",\n            borderRadius: \"4px\",\n            border: \"1px solid #ddd\"\n          }}\n        />\n        <button \n          onClick={sendMessage}\n          style={{\n            padding: \"8px 16px\",\n            borderRadius: \"4px\",\n            border: \"none\",\n            backgroundColor: \"#2196f3\",\n            color: \"white\",\n            cursor: \"pointer\"\n          }}\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chatbot; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}